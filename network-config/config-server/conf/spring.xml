<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<context:property-placeholder location="conf/params.properties" />

	<!-- This config makes @Autowired work -->
	<context:annotation-config />

	<!-- This config makes spring to scan classes and make beans -->
	<context:component-scan base-package="org.apache.niolex.config"/>

	<!-- Store all the configurations in memory. -->
	<bean id="storage" class="org.apache.niolex.config.core.MemoryStorage" />

	<!-- The replica Service managing connections to other servers. -->
	<bean id="replicaService" class="org.apache.niolex.config.service.impl.ReplicaServiceImpl"
		p:localPort="${server.localPort}" />

	<!-- The packets server. -->
	<bean id="iServer" class="org.apache.niolex.network.server.MultiNioServer"
		p:port="${server.localPort}" />

	<!-- The configuration server. -->
	<bean id="configServer" class="org.apache.niolex.config.server.ConfigServer"
		p:syncSleepInterval="300000"
		p:httpServerAddress="${server.httpServerAddress}" />

	<!-- dataSouce -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialPoolSize" value="1" />
		<property name="minPoolSize" value="1" />
		<property name="maxPoolSize" value="50" />
		<property name="maxIdleTime" value="3600" />
		<property name="idleConnectionTestPeriod" value="1500" />
        <!-- 当连接池中的连接用完时，C3P0一次性创建新连接的数目 -->
        <property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
        <!-- 定义在从数据库获取新连接失败后重复尝试获取的次数，默认为30 -->
        <property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}" />
        <!-- 两次连接中间隔时间，单位毫秒，默认为1000 -->
        <property name="acquireRetryDelay" value="${c3p0.acquireRetryDelay}" />
        <!-- 连接关闭时默认将所有未提交的操作回滚。默认为false -->
		<property name="autoCommitOnClose" value="${c3p0.autoCommitOnClose}" />
        <!-- 获取连接失败将会引起所有等待获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调
                                   用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数
                                   据源将申明已断开并永久关闭。默认为 false -->
        <property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}" />
        <!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException
                                   如设为0则无限期等待。单位毫秒，默认为0 -->
        <property name="checkoutTimeout" value="${c3p0.checkoutTimeout}" />
        <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatement数量。但由于预缓存的Statement
                                  属 于单个Connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素，如果maxStatements
                                  与 maxStatementsPerConnection均为0，则缓存被关闭。默认为0 -->
        <property name="maxStatements" value="${c3p0.maxStatements}" />
        <property name="maxStatementsPerConnection" value="${c3p0.maxStatementsPerConnection}" />
	</bean>

	<!-- Template -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg>
			<ref bean="dataSource" />
		</constructor-arg>
	</bean>

</beans>